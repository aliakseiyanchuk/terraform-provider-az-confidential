package core

import (
	"encoding/base64"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestVersionedConfidentialDataModelUnwrap(t *testing.T) {
	str := "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"

	b64, b64Err := base64.StdEncoding.DecodeString(str)
	assert.Nil(t, b64Err)

	vcm, unwrapErr := UnwrapPayload(b64)
	assert.Nil(t, unwrapErr)

	assert.True(t, len(vcm.Payload) > 0)
}
