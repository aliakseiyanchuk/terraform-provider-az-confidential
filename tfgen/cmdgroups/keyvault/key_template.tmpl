# ----------------------------------------------------------------------------
#
# Azure Key Vault Key
#
# The resource allows importing RSA and EC keys into the key vault form the
# encrypted (cipher-text) version of private key material.
# ----------------------------------------------------------------------------

resource "az-confidential_keyvault_key" "{{ .TFBlockName }}" {
  content = <<-CIPHERTEXT
         {{- range $value := fold80 .EncryptedContent.TerraformExpression }}
         {{ $value }}
         {{- end }}
         CIPHERTEXT

  {{ .EncryptedContentMetadata.CiphertextAppraisal }}

  # This key is enabled for operation. Optionally, there is an option
  # to temporarily disable it.
  enabled = true

  {{- if .HasKeyOperations }}
  key_opts = toset([
  {{- range $value := .KeyOperations }}
    "{{ $value }}",
  {{- end }}
  ])
  {{- else }}
  # The key operations supported by this confidential key can be controlled
  # using th key_opts property. Set this to the list of operations the Key
  # Vault service supports for this type.
  #
  # Note that it is not possible to
  # verify the correctness of these settings before the ciphertext is
  # decrypted.
  #
  # key_opts = toset([ ... desired key operations ...])
  {{- end }}

  # The key version cannot be used before this date
  # Needs to be formatted yyyy-mm-ddTHH:MM:SS'Z'
  # not_before_date = "{{ .NotBeforeExample }}"

  # The key version cannot be used after this date
  # Needs to be formatted yyyy-mm-dd'T'HH:MM:SS'Z'
  # not_after_date = "{{ .NotAfterExample }}"

  tags = {
        {{- if .HasTags }}
        {{- range $key, $value := .TerraformValueTags }}
        {{ $key }} = {{ $value }}
        {{- end }}
        {{- else }}
        # Fill the tags as desired
        # tagName =  "TagValue"
        {{- end }}
      }

  destination_key = {
      {{- if .DestinationCoordinate.VaultName.IsDefined }}
        vault_name = {{ .DestinationCoordinate.VaultName.TerraformExpression }}
      {{- else }}
        # Vault name will be inferred from the key vault where the wrapping key is stored.
        # If this is not what you want, specify the destination vault explicitly
      {{- end }}
        name = {{ .DestinationCoordinate.ObjectName.TerraformExpression }}
  }

  {{- if not .WrappingKeyCoordinate.IsEmpty }}
      wrapping_key = {
        {{- if .WrappingKeyCoordinate.VaultName.IsDefined }}
            vault_name = {{ .WrappingKeyCoordinate.VaultName.TerraformExpression }}
        {{- end }}
        {{- if .WrappingKeyCoordinate.KeyName.IsDefined }}
            name = {{ .WrappingKeyCoordinate.KeyName.TerraformExpression }}
        {{- end }}
        {{- if .WrappingKeyCoordinate.KeyVersion.IsDefined }}
            version = {{ .WrappingKeyCoordinate.KeyVersion.TerraformExpression }}
        {{- end }}
        {{- if .WrappingKeyCoordinate.Algorithm.IsDefined }}
            version = "{{ .WrappingKeyCoordinate.Algorithm.TerraformExpression }}"
        {{- end }}
      }
  {{- end }}
}