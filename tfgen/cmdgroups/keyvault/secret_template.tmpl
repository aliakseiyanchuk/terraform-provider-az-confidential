#
# Minimal terraform code for your example:
# ----------------------------------------------------------------------------

resource "az-confidential_secret" "{{ .TFBlockName }}" {
  content = "{{ .EncryptedContent }}"
  {{- if .HasCiphertextLabels }}
  # The ciphertext above bears the following label(s):
  {{- range $value := .CiphertextLabels }}
  # - {{ $value }}
  {{- end }}
  #
  # Labels are not considered confidential; however, you may want to remove
  # these before checking in this source code into your source control repo.
  {{- else }}
  # ---------------------------------------------------------------------------
  # INSECURE ENCRYPTION WARNING! READ CAREFULLY BEFORE PROCEEDING!
  #
  # This ciphertext does NOT include any labels. This means that any az-confidential
  # provider would be able to unwrap it, provided it has access to the wrapping key.
  # Although this might be safe in your specific context, please weight the risk
  # of an accidental or malicious copying of this secret e.g. across environments.
  {{- end }}

  # This secret is enabled for operation. Optionally, there is an option
  # to temporarily disable it.
  enabled = true

  # The secret version cannot be used before this date
  # Needs to be formatted yyyy-mm-ddTHH:MM:SS'Z'
  # not_before_date = "{{ .NotBeforeExample }}"

  # The secret version cannot be used after this date
  # Needs to be formatted yyyy-mm-dd'T'HH:MM:SS'Z'
  # not_after_date = "{{ .NotAfterExample }}"

  {{- if .IncludeTags }}
  tags = {
      {{- if .HasTags }}
      {{- range $key, $value := .TerraformValueTags }}
      {{ $key }} = {{ $value }}
      {{- end }}
      {{- else }}
      # Fill the tags as desired
      # tagName =  "TagValue"
      {{- end }}
    }
  {{- end }}

  destination_secret = {
    {{- if .DestinationCoordinate.VaultName.IsDefined }}
      vault_name = {{ .DestinationCoordinate.VaultName.TerraformExpression }}
    {{- else }}
      # Vault name will be inferred from the key vault where the wrapping key is stored.
      # If this is not what you want, specify the destination vault explicitly
    {{- end }}
      name = {{ .DestinationCoordinate.ObjectName.TerraformExpression }}
  }

  {{- if not .WrappingKeyCoordinate.IsEmpty }}
    wrapping_key = {
      {{- if .WrappingKeyCoordinate.VaultName.IsDefined }}
          vault_name = {{ .WrappingKeyCoordinate.VaultName.TerraformExpression }}
      {{- end }}
      {{- if .WrappingKeyCoordinate.KeyName.IsDefined }}
          name = {{ .WrappingKeyCoordinate.KeyName.TerraformExpression }}
      {{- end }}
      {{- if .WrappingKeyCoordinate.KeyVersion.IsDefined }}
          version = {{ .WrappingKeyCoordinate.KeyVersion.TerraformExpression }}
      {{- end }}
      {{- if .WrappingKeyCoordinate.Algorithm.IsDefined }}
          version = "{{ .WrappingKeyCoordinate.Algorithm.TerraformExpression }}"
      {{- end }}
    }
    {{- end }}
}